import { CreateRouteDto } from '../dto/CreateRoute.dto';
import { RouteResp } from '../dto/GetRoute.dto';

/**
 * @description Auto-generated. Keeping it here for now just to pass the autogenerated test
 *
 * @returns 'gateway' lol
 */
export function gateway(): string {
  return 'gateway';
}

export class Gateway {
  constructor(private gatewayHost: string) {}

  /**
   *
   * @returns the host of the gateway
   */
  GetHost() {
    return this.gatewayHost;
  }

  /**
   * @description Register the service to API-Gateway
   *
   * @param data CreateRouteDto
   * @returns {RouteResp} RouteResp on success. Throw an error on failure
   */
  RegisterService(data: CreateRouteDto) {
    return fetch(`http://${this.gatewayHost}/api/routes`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
      .then((res) => res.json())
      .then((res) => res as RouteResp);
  }

  /**
   * Get all available services on this gateway
   *
   * @returns {RouteResp[]} the list of all available services and their corresponding endpoints
   */
  GetAllServices() {
    return fetch(`http://${this.gatewayHost}/api/routes`)
      .then((res) => res.json())
      .then((res) => res as RouteResp[]);
  }

  /**
   * @description Get route data for a single service
   *
   * @param key Service key
   * @returns {RouteResp} route data of requested service key
   */
  GetService(key: string) {
    return fetch(`http://${this.gatewayHost}/api/routes/${key}`)
      .then((res) => res.json())
      .then((res) => res as RouteResp);
  }

  /**
   * @description Delete the route on api-gateway
   *
   * @param key Service key
   * @param port Service port
   * @returns
   */
  DeleteService(key: string, port: number) {
    return fetch(`http://${this.gatewayHost}/api/routes/${key}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        port,
      }),
    });
  }

  /**
   * @description Send a proxy request to api-gateway to a service
   *
   * @param serviceKey Service key
   * @param endpoint Endpoint to send to the service
   * @param reqData data to pass into fetch
   * @returns {Promise<Response>} response from the service
   */
  async SendRequest(
    serviceKey: string,
    serviceEndpoint: string,
    reqData: RequestInit
  ) {
    const route: RouteResp = await this.GetService(serviceKey);
    return fetch(
      `http://${this.gatewayHost}${route.endpoint}${serviceEndpoint}`,
      reqData
    );
  }
}
